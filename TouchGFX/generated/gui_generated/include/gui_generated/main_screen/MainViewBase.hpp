/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef MAINVIEWBASE_HPP
#define MAINVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/main_screen/MainPresenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <touchgfx/widgets/canvas/Circle.hpp>
#include <touchgfx/widgets/canvas/PainterRGB888.hpp>
#include <touchgfx/widgets/canvas/Line.hpp>
#include <touchgfx/widgets/TextArea.hpp>

class MainViewBase : public touchgfx::View<MainPresenter>
{
public:
    MainViewBase();
    virtual ~MainViewBase();
    virtual void setupScreen();

    /*
     * Custom Actions
     */
    virtual void goToMissionScreen();

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::Box box1;
    touchgfx::TextAreaWithOneWildcard textArea1;
    touchgfx::TextAreaWithOneWildcard soc_val;
    touchgfx::TextAreaWithOneWildcard mission_val;
    touchgfx::TextAreaWithOneWildcard sdc_val;
    touchgfx::Circle sdc_light_border;
    touchgfx::PainterRGB888 sdc_light_borderPainter;
    touchgfx::Circle sdc_light;
    touchgfx::PainterRGB888 sdc_lightPainter;
    touchgfx::Line line1;
    touchgfx::PainterRGB888 line1Painter;
    touchgfx::Line line1_1;
    touchgfx::PainterRGB888 line1_1Painter;
    touchgfx::Box main_box;
    touchgfx::Box mission_box;
    touchgfx::Box params_box;
    touchgfx::Box dv_box;
    touchgfx::TextArea mission_label;
    touchgfx::TextArea soc_label;
    touchgfx::TextArea sdc_label;
    touchgfx::TextArea power_label;
    touchgfx::TextArea battemp_label;
    touchgfx::TextArea speedlim_label;
    touchgfx::TextArea main_menu_label;
    touchgfx::TextArea mission_menu_label;
    touchgfx::TextArea params_menu_label;
    touchgfx::TextArea dv_menu_label;
    touchgfx::Line upper_divider;
    touchgfx::PainterRGB888 upper_dividerPainter;
    touchgfx::Line lower_divider;
    touchgfx::PainterRGB888 lower_dividerPainter;
    touchgfx::Line left_divider;
    touchgfx::PainterRGB888 left_dividerPainter;
    touchgfx::Line middle_left_divider;
    touchgfx::PainterRGB888 middle_left_dividerPainter;
    touchgfx::Line middle_divider;
    touchgfx::PainterRGB888 middle_dividerPainter;
    touchgfx::Line middle_right_divider;
    touchgfx::PainterRGB888 middle_right_dividerPainter;
    touchgfx::Line right_divider;
    touchgfx::PainterRGB888 right_dividerPainter;

    /*
     * Wildcard Buffers
     */
    static const uint16_t TEXTAREA1_SIZE = 4;
    touchgfx::Unicode::UnicodeChar textArea1Buffer[TEXTAREA1_SIZE];
    static const uint16_t SOC_VAL_SIZE = 4;
    touchgfx::Unicode::UnicodeChar soc_valBuffer[SOC_VAL_SIZE];
    static const uint16_t MISSION_VAL_SIZE = 12;
    touchgfx::Unicode::UnicodeChar mission_valBuffer[MISSION_VAL_SIZE];
    static const uint16_t SDC_VAL_SIZE = 12;
    touchgfx::Unicode::UnicodeChar sdc_valBuffer[SDC_VAL_SIZE];

private:

    /*
     * Canvas Buffer Size
     */
    static const uint32_t CANVAS_BUFFER_SIZE = 12000;
    uint8_t canvasBuffer[CANVAS_BUFFER_SIZE];

};

#endif // MAINVIEWBASE_HPP
